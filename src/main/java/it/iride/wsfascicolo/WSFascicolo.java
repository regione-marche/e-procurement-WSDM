package it.iride.wsfascicolo;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.10
 * 2015-01-16T15:25:57.739+01:00
 * Generated source version: 2.7.10
 * 
 */
@WebServiceClient(name = "WSFascicolo", 
                  targetNamespace = "http://tempuri.org/") 
public class WSFascicolo extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "WSFascicolo");
    public final static QName WSFascicoloSoap12 = new QName("http://tempuri.org/", "WSFascicoloSoap12");
    public final static QName WSFascicoloSoap = new QName("http://tempuri.org/", "WSFascicoloSoap");
    public final static QName WSFascicoloHttpGet = new QName("http://tempuri.org/", "WSFascicoloHttpGet");
    public final static QName WSFascicoloHttpPost = new QName("http://tempuri.org/", "WSFascicoloHttpPost");
    static {
        WSDL_LOCATION = null;
    }

    public WSFascicolo(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WSFascicolo(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WSFascicolo() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns WSFascicoloSoap
     */
    @WebEndpoint(name = "WSFascicoloSoap12")
    public WSFascicoloSoap getWSFascicoloSoap12() {
        return super.getPort(WSFascicoloSoap12, WSFascicoloSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSFascicoloSoap
     */
    @WebEndpoint(name = "WSFascicoloSoap12")
    public WSFascicoloSoap getWSFascicoloSoap12(WebServiceFeature... features) {
        return super.getPort(WSFascicoloSoap12, WSFascicoloSoap.class, features);
    }
    /**
     *
     * @return
     *     returns WSFascicoloSoap
     */
    @WebEndpoint(name = "WSFascicoloSoap")
    public WSFascicoloSoap getWSFascicoloSoap() {
        return super.getPort(WSFascicoloSoap, WSFascicoloSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSFascicoloSoap
     */
    @WebEndpoint(name = "WSFascicoloSoap")
    public WSFascicoloSoap getWSFascicoloSoap(WebServiceFeature... features) {
        return super.getPort(WSFascicoloSoap, WSFascicoloSoap.class, features);
    }
    /**
     *
     * @return
     *     returns WSFascicoloHttpGet
     */
    @WebEndpoint(name = "WSFascicoloHttpGet")
    public WSFascicoloHttpGet getWSFascicoloHttpGet() {
        return super.getPort(WSFascicoloHttpGet, WSFascicoloHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSFascicoloHttpGet
     */
    @WebEndpoint(name = "WSFascicoloHttpGet")
    public WSFascicoloHttpGet getWSFascicoloHttpGet(WebServiceFeature... features) {
        return super.getPort(WSFascicoloHttpGet, WSFascicoloHttpGet.class, features);
    }
    /**
     *
     * @return
     *     returns WSFascicoloHttpPost
     */
    @WebEndpoint(name = "WSFascicoloHttpPost")
    public WSFascicoloHttpPost getWSFascicoloHttpPost() {
        return super.getPort(WSFascicoloHttpPost, WSFascicoloHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSFascicoloHttpPost
     */
    @WebEndpoint(name = "WSFascicoloHttpPost")
    public WSFascicoloHttpPost getWSFascicoloHttpPost(WebServiceFeature... features) {
        return super.getPort(WSFascicoloHttpPost, WSFascicoloHttpPost.class, features);
    }

}
