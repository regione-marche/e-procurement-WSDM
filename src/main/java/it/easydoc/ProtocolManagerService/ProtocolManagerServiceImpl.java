package it.easydoc.ProtocolManagerService;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.10
 * 2018-11-06T15:37:15.939+01:00
 * Generated source version: 2.7.10
 * 
 */
@WebServiceClient(name = "ProtocolManagerServiceImpl", 
                  targetNamespace = "http://www.consorziocsa.it/easydoc/ws") 
public class ProtocolManagerServiceImpl extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.consorziocsa.it/easydoc/ws", "ProtocolManagerServiceImpl");
    public final static QName ProtocolManagerServiceImplPort = new QName("http://www.consorziocsa.it/easydoc/ws", "ProtocolManagerServiceImpl_port");
    static {
        WSDL_LOCATION = null;
    }

    public ProtocolManagerServiceImpl(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ProtocolManagerServiceImpl(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ProtocolManagerServiceImpl() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns ProtocolManagerService
     */
    @WebEndpoint(name = "ProtocolManagerServiceImpl_port")
    public ProtocolManagerService getProtocolManagerServiceImplPort() {
        return super.getPort(ProtocolManagerServiceImplPort, ProtocolManagerService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProtocolManagerService
     */
    @WebEndpoint(name = "ProtocolManagerServiceImpl_port")
    public ProtocolManagerService getProtocolManagerServiceImplPort(WebServiceFeature... features) {
        return super.getPort(ProtocolManagerServiceImplPort, ProtocolManagerService.class, features);
    }

}
